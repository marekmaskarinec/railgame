
import (
	"th.um"
	"std.um"
	"signal.um"
	"canvas.um"
	"../libs/strings.um"

	"../util.um"
	"../scene.um"
	"../global.um"
	"../ui/dialog.um"
	"../rail/rail.um"
	"../rail/agent.um"
)

type Level* = struct {
	sys: rail.System
	name: str
	pairs: []^rail.Switch
	agents: []agent.Agent
	passesNeeded: int
	timeToPass: int

	// runtime stuff
	simStart: int
	dg: dialog.Dialog
	simDone: bool
	simTook: int
	passes: []int
}

const (
	difficulties = [3]real32{1.5, 1, 0.5}
)

fn (lvl: ^Level) repathAgent*(i: int) {
	lvl.agents[i].setPath(&lvl.sys, lvl.pairs[i * 2], lvl.pairs[i * 2 + 1])
	printf("repathing %d\n", i)
}

fn (lvl: ^Level) resetAgents*() {
	for i,_ag in lvl.agents {
		ag := &lvl.agents[i]
		ag.reset()
		lvl.repathAgent(i)
	}
}

fn (lvl: ^Level) test*(): int {
	done := false

	const interval = 100

	time := 0
	for true {
		for i,_ag in lvl.agents {
			ag := &lvl.agents[i]

			if len(ag.path) == 0 { return -1 }

			ag.handle(interval)	
			if ag.state == agent.agDone {
				lvl.passes[i]++
				lvl.repathAgent(i)
			}
		}
	
		for pc in lvl.passes {
			printf("%s\n", repr(pc))
			/*if pc => lvl.passesNeeded {
				return time
			}*/
		}
	}

	return time
}

fn (lvl: ^Level) startSim*() {
	lvl.simDone = false
	lvl.simStart = th.time
	lvl.passes = make([]int, len(lvl.agents))
	lvl.simTook = 0
	lvl.resetAgents()
}

fn (lvl: ^Level) finishSim() {
	lvl.simDone = true
	signal.emit("sim_done", null)
}

fn (lvl: ^Level) skipSim*() {
	lvl.simTook = th.time - lvl.simStart + lvl.test()
	lvl.finishSim()
}

fn (lvl: ^Level) reset*() {
	lvl.resetAgents()
}

fn (lvl: ^Level) init*() {
	if len(lvl.agents) == 0 {
		lvl.agents = []agent.Agent{}
	}
	if len(lvl.pairs) == 0 {
		lvl.pairs = []^rail.Switch{}
	}
}

fn (lvl: ^Level) handle*() {
	if lvl.simDone {
		lvl.dg.handle()
		return
	}

	canvas.drawText(repr(th.time - lvl.simStart), th.Vf2{1, 1}, global.railColor, 1)

	for i,_ag in lvl.agents {
		ag := &lvl.agents[i]
		if len(ag.path) != 0 && ag.state != agent.agDone {
			ag.handle(th.delta)
			continue
		}

		lvl.repathAgent(i)
		lvl.passes[i]++
		ag.handle(th.delta)
	}

	for np in lvl.passes {
		if np >= lvl.passesNeeded {
			lvl.simTook = th.time - lvl.simStart
			lvl.finishSim()
		}
	}
}

fn (lvl: ^Level) draw*() {
	if lvl.simDone {
		lvl.dg.draw()
		return
	}

	for i,ag in lvl.agents {
		ag.draw()
	}
}

fn load*(dir, src: str): Level {
	lvl := Level{}

	l := strings.split(src, "\n")
	lvl.name = l[0]
	lvl.sys = rail.load(util.readall(dir + l[1]))
	lvl.timeToPass = std.atoi(l[2])
	lvl.passesNeeded = std.atoi(l[3])

	sp := strings.split(l[4], " ")
	lvl.pairs = make([]^rail.Switch, std.atoi(sp[0]) * 2)
	for i:=1; i < len(sp); i++ {
		lvl.pairs[i-1] = lvl.sys.swis[std.atoi(sp[i])]
	}

	lvl.agents = []agent.Agent{}
	for i:=5; i < len(l); i++ {
		if len(l[i]) == 0 || l[i][0] == '#' {
			continue
		}

		sp := strings.split(l[i], " ")
		if sp[0] != "ag" {
			continue
		}
	
		lvl.agents = append(lvl.agents, agent.Agent{
			length: std.atoi(sp[1]),
			maxSpeed: std.atof(sp[2]),
			accel: std.atof(sp[3]),
			braking: std.atof(sp[4])})
	}

	return lvl
}
