
import (
	"th.um"
	"ui.um"
	"ui/grid.um"
	"ui/label.um"
	"std.um"
	"input.um"
	"signal.um"

	"level.um"
	"scene.um"
	"editor.um"
	"global.um"
	"../util.um"
	"../ui/dialog.um"
	"../rail/rail.um"
)

const (
	mEditing* = 0
	mRunning*

	panSpeed = 0.05
)

var (
	lvl*: level.Level
	mode: int

	edUi: grid.Grid
	lvlUi: grid.Grid

	camPos: th.Vf2

	savePath*: str
)

fn reset*(from: int) {
	camPos = th.Vf2{global.cam.x, global.cam.y}
	mode = mEditing
	editor.reset()
	lvl.reset()
}

fn launchTest() {
	lvl.reset()
	lvl.startSim()
	mode = mRunning

	signal.register("sim_done", fn(ctx: interface{}) {
		passed := 0
		for dif in level.difficulties {
			if lvl.simTook < lvl.timeToPass * dif {
				passed++
			} else {
				break
			}
		}

		lvl.dg = dialog.Dialog{
			title: "PASSED " + repr(passed) + "OUT OF " + repr(len(level.difficulties)) + "CHALLANGES",
			text: "TOOK " + repr(lvl.simTook/1000) + "s",
			buttons: []str{"MENU", "EDITOR"},
			callback: fn(self: ^dialog.Dialog, choice: int) {
				switch choice {
				case 0:
					scene.change(global.chooserId)
				case 1:
					mode = mEditing
				}
			},
			primaryCol: global.bgColor,
			secondaryCol: global.railColor}
		lvl.dg.init()
	})
}

fn snap*(v, s: th.fu): th.fu {
	return round(v / s) * s
}

fn setUi*() {
	edUi = grid.mk(5, 1)
	edUi.elements = []ui.Element{
		label.mk(global.fontReg, "RUN", global.theme, 1),
		label.mk(global.fontReg, "TEST", global.theme, 1),
		label.mk(global.fontReg, "SAVE", global.theme, 1),
		label.mk(global.fontReg, "", global.theme, 1)}
	edUi.border = 2
	edUi.g.t = th.Transform{
		s: th.Vf2{60, 10},
		p: th.Vf2{0, global.cam.h-10}}
	
	util.initBtn(^label.Label(edUi.elements[0]), th.Vf2{},
		fn(eventType: th.uu, ctx: interface{}) {
			if eventType != ui.eventRelease {
				return
			}
  
			launchTest()
	})

	util.initBtn(^label.Label(edUi.elements[1]), th.Vf2{1, 0},
		fn(eventType: th.uu, ctx: interface{}) {
			if eventType != ui.eventRelease {
				return
			}
  
		lvl.reset()
		label.Label(edUi.elements[3]).text = repr(lvl.test()/1000) + "s"
	})

	edUi.elements[3].get().gridPos = th.Vf2{3, 0}
	edUi.elements[3].get().gridSpan = th.Vf2{2, 1}

	util.initBtn(^label.Label(edUi.elements[2]), th.Vf2{2, 0},
		fn(eventType: th.uu, ctx: interface{}) {
			if eventType != ui.eventRelease {
				return
			}
  
		f := std.fopen(savePath, "w")
		fprintf(f, "%s\n", lvl.sys.export())
		std.fclose(f)
	})

	lvlUi = grid.mk(2, 1)
	lvlUi.elements = []ui.Element{
		label.mk(global.fontReg, "BACK", global.theme, 1),
		label.mk(global.fontReg, "SKIP", global.theme, 1)}
	lvlUi.border = 2
	lvlUi.g.t = th.Transform{
		s: th.Vf2{40, 10},
		p: th.Vf2{0, global.cam.h - 10}}
	
	util.initBtn(^label.Label(lvlUi.elements[0]), th.Vf2{},
		fn(eventType: th.uu, ctx: interface{}) {
			if eventType != ui.eventRelease {
				return
			}
  
		mode = mEditing
	})

	util.initBtn(^label.Label(lvlUi.elements[1]), th.Vf2{1, 0},
		fn(eventType: th.uu, ctx: interface{}) {
			if eventType != ui.eventRelease {
				return
			}
  
		lvl.skipSim()
	})
}

fn handle*() {
	if input.isPressed(input.key_left) {
		camPos.x -= panSpeed * th.delta
	}
	if input.isPressed(input.key_right) {
		camPos.x += panSpeed * th.delta
	}
	global.cam.x = util.snap(camPos.x, rail.tileSize)
	if input.isPressed(input.key_up) {
		camPos.y -= panSpeed * th.delta
	}
	if input.isPressed(input.key_down) {
		camPos.y += panSpeed * th.delta
	}
	global.cam.y = util.snap(camPos.y, rail.tileSize)

	switch mode {
	case mEditing:
		editor.handle(global.cam)
		edUi.handle()
	case mRunning:
		if !lvl.simDone {
			lvl.handle()
			lvlUi.handle()
		} else {
			lvl.dg.handle()
		}
	}
}

fn draw*() {
	lvl.sys.draw(global.cam)
	
	switch mode {
	case mEditing:
		editor.draw()
		edUi.draw()
	case mRunning:
		lvl.draw()
		lvlUi.draw()
		if lvl.simDone {
			lvl.dg.draw()
		}
	}
}

fn init*() {
	lvl.init()
	editor.init(&lvl)

	setUi()

	global.gameId = scene.Scene{
		name: "Game",
		reset: reset,
		handle: handle,
		draw: draw}.register()
}
