
import (
	"th.um"
	"std.um"
	"rect.um"
	"misc.um"
	"input.um"
	"canvas.um"

	"level.um"
	"../util.um"
	"../global.um"
	"../rail/rail.um"
	"../rail/agent.um"
)

const (
	edOff = 0
	edPlace
	edDel
	edDebug
	edBlock

	modeNames = [5]str{"OFF", "PLACE", "DELETE", "DEBUG", "BLOCK"}

	visColor = 0xdfdf47ff
)

var (
	mode: int
	sys*: ^rail.System

	// place mode vars
	origin: th.Vf2
	hasOrigin: bool
	angle: th.fu

	np: th.Vf2
	np2: th.Vf2

	debugSegs: []^rail.Switch
	agents: []agent.Agent

	viSw: ^rail.Switch

	lvl: ^level.Level
)

fn reset*() {
	mode = edPlace

	hasOrigin = false
}

fn genDbgAgent(): agent.Agent {
	ag := agent.Agent{
		length: util.rrand(2, 8),
		maxSpeed: th.fu(util.rrand(4, 10))/1000,
		accel: util.rrand(1, 5)/1000.0/1000,
		braking: util.rrand(5, 20)/10000.0/1000}
	ag.init()
	return ag
}

fn init*(l: ^level.Level) {
	lvl = l
	sys = &l.sys
}

fn scanSwitches(p1, p2: th.Vf2): []^rail.Switch {
	n := p2.sub(p1).norm()
	pa := p1.angleTo(p2)
	if pa == 360 { pa = 0 }

	out := []^rail.Switch{}

	for a:=-90.0; a <= 90; a+=45 {
		p := p2
		m := n.rotated(th.Vf2{}, a)

		for i:=0; i < 40; i++ {
			p = p.add(m)
			if sw := sys.atSwis(p); sw != null && sw^ != null {
				out = append(out, sys.atSwis(p)^)				
				break
			}
		}
	}

	return out
}

fn genPlaceTiles(p2: th.Vf2): []rail.Tile {
	p := origin
	if p.x < p2.x || p.y < p2.y {
		tmp := p
		p = p2
		p2 = tmp
	}

	n := p2.sub(p).norm()
	tiles := make([]rail.Tile, round(p.distanceTo(p2) / n.mag()) + 1)

	a := round(p.angleTo(p2)) % 360

	for i, t in tiles {
		tiles[i].pos = p
		tiles[i].rotation = a
		tiles[i].color = global.railColor
		p = p.add(n)
	}

	return tiles
}

fn place*(p2: th.Vf2) {
	tiles := genPlaceTiles(p2)
	sys.placeTiles(tiles)
}

fn snap*(v, s: th.fu): th.fu {
	return round(v / s) * s
}

fn handleInput*() {
	if input.isJustPressed('p') {
		mode = edPlace
	} else if input.isJustPressed('d') {
		mode = edDel
	} else if input.isJustPressed('g') {
		mode = edDebug
	} else if input.isJustPressed('b') {
		mode = edBlock
	} else if input.isJustPressed('u') {
		global.debugMode = !global.debugMode
	}

	if input.isJustPressed('s') {
		f := std.fopen("export.txt", "w")
		fprintf(f, "%s\n", sys.export())
		std.fclose(f)
	} else if input.isJustPressed('l') {
		sys^ = rail.load(util.readall("export.txt"))
	}

}

fn placeMode*() {
	for x:=0.0; x < global.cam.w; x+=rail.tileSize {
		if round(x / rail.tileSize) % 2 == 0 {
			continue
		}
		canvas.drawRect(0x22, rect.mk(x, 0, rail.tileSize, global.cam.h))
	}
  
	for y:=0.0; y < global.cam.h; y+=rail.tileSize {
		if round(y / rail.tileSize) % 2 == 0 {
			continue
		}
		canvas.drawRect(0x22, rect.mk(0, y, global.cam.w, rail.tileSize))
	}

	mp := rail.worldToSys(input.getGlobalMousePos(global.cam)).flr()

	if hasOrigin {
		p2 := th.Vf2{ 0, -origin.distanceTo(mp) }.
			rotated(th.Vf2{0, 0}, angle + 90).
			add(origin).
			rnd()
		canPlace := false

		if origin.x != p2.x || origin.y != p2.y {
			angle = snap(mp.angleTo(origin), 45)
			canPlace = sys.canPlace(genPlaceTiles(p2))

			if !input.isPressed(input.mouse1) {
				if canPlace { place(p2) }
				hasOrigin = false
			}
		}

		if input.isJustPressed(input.mouse3) {
			hasOrigin = false
		}

		swis := scanSwitches(origin, p2)
		for sw in swis {
			canvas.drawLine(0x00ff0099,
				global.cam.toScreen(rail.sysToWorld(p2).add(th.Vf2{1, 1})),
				global.cam.toScreen(rail.sysToWorld(sw.pos).add(th.Vf2{1, 1})), 1)
		}

		color := global.railColor 
		if !canPlace { color = th.red }

		canvas.drawLine(color,
			global.cam.toScreen(rail.sysToWorld(origin).add(th.Vf2{1, 1})),
			global.cam.toScreen(rail.sysToWorld(p2).add(th.Vf2{1, 1})),
			rail.tileSize)
	} else {
		if input.isJustPressed(input.mouse1) {
			hasOrigin = true
			origin = mp
		}

		if input.isJustPressed(input.mouse3) {
			sw := sys.atSwis(mp)^
			if sw != null {
				sw.merge(sys)
			}

			t := sys.at(mp)^
			if t != null {
				sg := t.parent
				sg.dir++
				if sg.dir == 2 {
					sg.dir = -1
				}
			}
		}
	}
}

fn handle*(cam: rect.Rect) {
	handleInput()

	mp := rail.worldToSys(input.getGlobalMousePos(global.cam)).flr()
	sw := sys.atSwis(mp)
	if viSw != null {
		viSw.color = rail.switchColor
	}
	if sw != null && sw^ != null {
		sw^.color = visColor
		viSw = sw^
	}

	root := cam.toScreen(th.Vf2{})
	if root.x > 0 {
		canvas.drawRect(0xff0000aa, rect.mk(0, 0, root.x, cam.h*2))
	}
	if root.y > 0 {
		canvas.drawRect(0xff0000aa, rect.mk(root.x, 0, cam.w*2, root.y))
	}

	corner := cam.toScreen(rail.sysToWorld(th.Vf2{len(sys.tiles), len(sys.tiles[0])}))
	if corner.x < global.cam.w {
		canvas.drawRect(0xff0000aa, rect.mk(corner.x, root.y, cam.w*2, cam.h*2))
	}
	if corner.y < global.cam.h {
		canvas.drawRect(0xff0000aa, rect.mk(root.x, corner.y, cam.w*2, cam.h*2))
	}

	switch mode {
	case edPlace:
		placeMode()
	case edDel:
		if input.isJustPressed(input.mouse1) {
			tl := sys.at(mp)^
			if tl != null {
				tl.parent.reduce(sys, 0, len(tl.parent.tiles))
			}
		}
	case edDebug:
		if input.isJustPressed(input.mouse1) && sys.atSwis(mp)^ != null {
			if  np.x == 0 && np.y == 0 {
				np = mp
			} else {
				lvl.pairs = append(lvl.pairs, []^rail.Switch{
					sys.atSwis(np)^, sys.atSwis(mp)^})
				lvl.agents = append(lvl.agents, genDbgAgent())
				np = th.Vf2{}
			}
		}
	case edBlock:
		if input.isJustPressed(input.mouse1) {
			if np.x == 0 && np.y == 0 {
				np = mp
			} else {
				sys.mkBlock(np, mp.sub(np))
				np = th.Vf2{}
			}
		}

		if input.isJustPressed(input.mouse3) {
			np = th.Vf2{}
		}

		if np.x != 0 && np.y != 0 {
			p := cam.toScreen(np.mul(th.Vf2{rail.tileSize, rail.tileSize}))
			d := cam.toScreen(mp.sub(np).mul(th.Vf2{rail.tileSize, rail.tileSize}))
			canvas.drawRect(global.railColor - 0x44, rect.mk(p.x, p.y, d.x, d.y))
		}
	}
}

fn draw*() {
	global.fontBold.draw(modeNames[mode], th.Vf2{2, 2}, global.railColor, 2)
}
