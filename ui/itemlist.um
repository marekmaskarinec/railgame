
import (
	"th.um"
	"ui.um"
	"rect.um"
	"image.um"
	"input.um"
	"canvas.um"

	"rail.um"
	"global.um"
)

type Item* = struct {
	img: image.Image
	text: str
}

type ItemList* = struct {
	g: ui.Generic

	items: []Item
	limit: int
	offset: int
	selection: int

	renderer: ui.TextRenderer
	fontSize: th.fu
	clickToSelect: bool

	scrollBarWidth: th.fu
	scrollOffset: th.fu
}

fn (i: ^Item) draw(ren: ui.TextRenderer, pos, dm: th.Vf2, fg, bg: uint32, fs: th.fu) {
	canvas.drawRect(bg, rect.mk(pos.x, pos.y, dm.x, dm.y))
	pos.x += 1 * fs
	if i.img.handle != 0 {
		i.img.draw(th.Transform{p: pos, s: th.Vf2{1, 1}}, th.white)
		pos.x += i.img.getDims().x
	}

	ren.draw(i.text, pos, fg, fs)
}

fn (il: ^ItemList) get*(): ^ui.Generic {
	return &il.g
}

fn (il: ^ItemList) itemHeight(): th.fu {
	return (il.renderer.runeDims(int32('A')).y + 2) * il.fontSize
}

fn (il: ^ItemList) doesHover(): bool {
	mp := input.getMousePos()
	h := il.limit * il.itemHeight()
	if len(il.items) < il.limit {
		h = len(il.items) * il.itemHeight()
	}
	return (mp.x > il.g.t.p.x + il.scrollBarWidth && mp.x < il.g.t.p.x + il.g.t.s.x &&
		mp.y > il.g.t.p.y && mp.y < il.g.t.p.y + h)
}

fn (il: ^ItemList) handleScrollBar() {
	iw := real(il.limit)/len(il.items) * il.itemHeight()
	mp := input.getMousePos()

	if !(mp.x > il.g.t.p.x && mp.y < il.g.t.p.x + il.scrollBarWidth &&
	   mp.y > il.g.t.p.y + il.offset * iw && mp.y < il.g.t.p.y + (il.offset + il.limit) * iw) {
		return
	}

	if input.isJustPressed(input.mouse1) {
		il.scrollOffset = mp.y - il.g.t.p.y - il.offset * iw
		return
	}

	if input.isPressed(input.mouse1) {
		il.offset = trunc((mp.y - il.g.t.p.y - il.scrollOffset) / iw)

		if il.offset < 0 {
			il.offset = 0
		}
		if il.offset > len(il.items) - il.limit {
			il.offset = len(il.items) - il.limit
		}
		if il.limit > len(il.items) {
			il.offset = 0	
		}
	}
}

fn (il: ^ItemList) handle*() {
	if len(il.items) == 0 {
		return
	}

	sbw := il.scrollBarWidth
	if len(il.items) < il.limit {
		il.scrollBarWidth = 0
	}
	il.handleScrollBar()

	mp := input.getMousePos()

	if !il.doesHover() {
		il.g.pressed = false
		if !il.clickToSelect {
			il.selection = -1
		}
	} else {
		if input.isJustPressed(input.key_up) && il.offset > 0 {
			il.offset--
		}
    
		if input.isJustPressed(input.key_down) && il.offset < len(il.items) - il.limit {
			il.offset++
		}

		if !il.clickToSelect || input.isJustPressed(input.mouse1) {
			il.selection = trunc((mp.y - il.g.t.p.y) / il.itemHeight() + il.offset)
			il.g.onEvent(ui.eventHover, il.g.ctx)
		}

		if input.isPressed(input.mouse1) {
			if il.g.pressed {
				il.g.onEvent(ui.eventPress, il.g.ctx)
			} else {
				il.g.onEvent(ui.eventJustPress, il.g.ctx)
				il.g.pressed = true
			}
		} else if il.g.pressed {
			il.g.onEvent(ui.eventRelease, il.g.ctx)
			il.g.pressed = false
		}
	}

	il.scrollBarWidth = sbw
}

fn (il: ^ItemList) drawScrollBar() {
	iw := real(il.limit)/len(il.items) * il.itemHeight()

	canvas.drawRect(global.railColor, rect.mk(
		il.g.t.p.x, il.g.t.p.y + iw * il.offset,
		il.scrollBarWidth, iw * il.limit))	
}

fn (il: ^ItemList) draw*() {
	if len(il.items) == 0 {
		return
	}

	sbw := il.scrollBarWidth
	if len(il.items) < il.limit {
		il.scrollBarWidth = 0
	}

	il.drawScrollBar()

	p := il.g.t.p
	for i:=il.offset; i < il.offset + il.limit && i < len(il.items); i++ {
		fg := global.railColor
		bg := global.bgColor
		if i == il.selection {
			fg = global.bgColor
			bg = global.railColor
		}

		il.items[i].draw(il.renderer, th.Vf2{p.x + il.scrollBarWidth, p.y},
			th.Vf2{il.g.t.s.x - il.scrollBarWidth, il.itemHeight()},
			fg, bg, il.fontSize)
		p.y += il.itemHeight()
	}

	il.scrollBarWidth = sbw
}

fn mk*(p, s: th.Vf2, r: ui.TextRenderer, fontSize: th.fu): ItemList {
	il := ItemList{}

	il.g = ui.Generic{
		t: th.Transform{
			p: p,
			s: s}}
	il.renderer = r
	il.fontSize = fontSize
	il.limit = trunc(s.y / il.itemHeight())
	il.selection = -1

	return il
}
