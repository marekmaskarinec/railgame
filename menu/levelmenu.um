
import (
	"th.um"
	"ui.um"
	"std.um"
	"rect.um"
	"input.um"
	"canvas.um"
	"../libs/strings.um"

	"../util.um"
	"../scene.um"
	"../global.um"
	"../rail/rail.um"
	"../game/game.um"
	"../game/level.um"
	"../ui/itemlist.um"
)

type SaveGame* = struct {
	sysPath: str
	name: str
	passed: int
}

type MenuLevel* = struct {
	lvl: level.Level
	saves: []SaveGame
	ilist: itemlist.ItemList
}

type Dir* = struct {
	parent: ^Dir
	name: str
	dirs: []^Dir
	levels: []MenuLevel
	items: []itemlist.Item
}

const (
	fontSize = 0.8
)

var (
	dir: ^Dir
	lvlList: itemlist.ItemList
)

fn (ml: ^MenuLevel) draw() {
	r2 := th.Vf2{global.cam.w/2 + 2, 9}
	global.fontBold.draw(ml.lvl.name, r2, rail.railColor, 1)
	r2.y += 7

	ml.ilist.draw()
	// TODO: new save button
}

fn (ml: ^MenuLevel) handle() {
	ml.ilist.handle()
}

fn loadSaves*(prefix: str, src: str): []SaveGame {
	saves := []SaveGame{}
	
	lines := strings.split(src, "\n")
	for l in lines {
		if len(l) == 0 || l[0] == '#' {
			continue
		}
		sp := strings.split(l, " ")
		saves = append(saves, SaveGame{
			name: sp[1],
			sysPath: prefix + "/" + sp[1],
			passed: std.atoi(sp[2])})
	}
	return saves
}

fn mkMenuLevel(prefix, path: str): MenuLevel {
	savesDir := prefix + path + "-saves/"
	lvl := level.load(prefix, util.readall(prefix + path + ".ssv"))

	ml := MenuLevel{
		lvl: lvl,
		saves: loadSaves(savesDir, util.readall(savesDir + "saves.ssv"))}

	ml.ilist = itemlist.mk(th.Vf2{global.cam.w/2 + 1, 16},
		th.Vf2{global.cam.w/2, global.cam.h/4},
		&global.fontReg, fontSize)
	ml.ilist.scrollBarWidth = 5

	ml.ilist.items = make([]itemlist.Item, len(ml.saves))
	for i:=0; i < len(ml.saves); i++ {
		ml.ilist.items[i] = itemlist.Item{text: ml.saves[i].name}
	}

	ml.ilist.g.ctx = ml
	ml.ilist.g.onEvent = fn(eventType: th.uu, ctx: interface{}) {
		if eventType != ui.eventRelease {
			return
		}
		ml := MenuLevel(ctx)

		sv := ml.saves[ml.ilist.selection]
		game.lvl = ml.lvl
		game.lvl.sys = rail.load(util.readall(sv.sysPath + ".ssv"))
		scene.change(global.gameId)
	}

	return ml
}

// Recursively loads directory
fn loadDir*(prefix: str, src: str): ^Dir {
	d := new(Dir)
	d^ = Dir{
		dirs: []^Dir{},
		levels: []MenuLevel{}}

	lines := strings.split(src, "\n")
	for l in lines {
		if len(l) == 0 || l[0] == "#" {
			continue
		}
		sp := strings.split(l, " ")
		
		if sp[0] == "lvl" {
			d.levels = append(d.levels, mkMenuLevel(prefix, sp[1]))
		} else if sp[0] == "dir" {
			d2 := loadDir(prefix + sp[1] + "/", util.readall(prefix + sp[1] + "/dirspec.ssv"))
			d2.name = sp[1]
			d2.parent = d
			d2.items = append([]itemlist.Item{itemlist.Item{text: ".."}}, d2.items)
			d.dirs = append(d.dirs, d2)
		}
	}

	d.items = []itemlist.Item{}

	for dir in d.dirs {
		d.items = append(d.items, itemlist.Item{text: "DIR " + dir.name})
	}

	for lvl in d.levels {
		d.items = append(d.items, itemlist.Item{text: "LVL " + lvl.lvl.name})
	}

	return d
}

fn reset*(from: int) {

}

fn handle*() {
	lvlList.handle()
	c := lvlList.selection
	if dir.parent != null { c-- }
	c -= len(dir.dirs)
	if c >= 0 {
		dir.levels[c].handle()
	}
}

fn draw*() {
	// draw folder name
	row := 1
	global.fontBold.draw("Listing of: " + dir.name + "/", th.Vf2{1, row}, rail.railColor, 1)
	row += 7 + 1

	lvlList.draw()
	c := lvlList.selection
	if dir.parent != null { c-- }
	c -= len(dir.dirs)
	if c >= 0 {
		dir.levels[c].draw()
	}
}

fn init*() {
	dir = loadDir(global.levelDir, util.readall(global.levelDir + "/dirspec.ssv"))
	dir.name = "root"

	global.chooserId = scene.Scene{
		name: "level picker",
		reset: reset,
		handle: handle,
		draw: draw}.register()
	lvlList = itemlist.mk(th.Vf2{0, 8}, th.Vf2{global.cam.w/2, global.cam.h-7},
		&global.fontReg, fontSize)
	lvlList.scrollBarWidth = 5
	lvlList.items = dir.items
	lvlList.clickToSelect = true

	lvlList.g.onEvent = fn(eventType: th.uu, ctx: interface{}) {
		if eventType != ui.eventRelease {
			return
		}

		c := lvlList.selection
		if dir.parent != null { c-- }
		if dir.parent != null && lvlList.selection == 0 {
			dir = dir.parent
			lvlList.items = dir.items
			lvlList.selection = -1
		} else if c < len(dir.dirs) && c >= 0 {
			dir = dir.dirs[c]	
			lvlList.items = dir.items
			lvlList.selection = -1
		}
	}
}
