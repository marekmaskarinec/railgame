
import (
	"th.um"
	"ui.um"
	"ui/label.um"
	"std.um"

	"global.um"
)

fn readall*(name: str): str {
		f := std.fopen(name, "r")
		if f == null {
			printf("Could not open file %s\n", name)
		}
    const blockSize = 16
    res := ""

    for ok := true; ok {
	    var buff: [blockSize + 1]char
	    ok = std.fread(f, ^[blockSize]char(&buff)) == 1
	    res += str([]char(buff))
    }

		std.fclose(f)
    return res
}

fn maxf*(v1, v2: th.fu): th.fu {
	if v1 > v2 { return v1 }
	return v2
}

fn minf*(v1, v2: th.fu): th.fu {
	if v1 < v2 { return v1 }
	return v2
}

fn snap*(v, s: th.fu): th.fu {
	return round(v / s) * s
}

fn rrand*(min, max: int): int {
	r := std.rand()
	r = r % (max - min)
	return r + min
}

fn initBtn*(btn: ^label.Label, gridPos: th.Vf2, eh: fn(eventType: th.uu, ctx: interface{})) {
	btn.center = true
	btn.scale = 0.8
	btn.renderer = global.fontReg
	btn.g.ctx = btn
	btn.g.onEvent = eh
	btn.g.gridPos = gridPos
	btn.g.theme = global.theme
}

fn themeBtn*(btn: ^label.Label, ev: th.uu) {
	switch ev {
	case ui.eventJustPress:
		btn.g.theme.fg = global.railColor
		btn.g.theme.bg = global.bgColor
		btn.renderer = global.fontBold
	case ui.eventRelease:
		btn.g.theme.fg = global.bgColor
		btn.g.theme.bg = global.railColor
		btn.renderer = global.fontReg
	}
}
